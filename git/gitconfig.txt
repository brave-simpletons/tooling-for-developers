[http]
    sslBackend = schannel
    sslVerify = true
    sslCAInfo = ~/scoop/apps/git/current/mingw64/ssl/certs/ca-bundle.crt
[credential]
    helper = manager
    useHttpPath = true
[fetch]
    prune = true
[pull]
    rebase = true
[core]
    longpaths = true
[alias]
    # Debug git commands.
    # Usage: git debug <other git command>
    #        e.g. git debug status
    debug = !GIT_TRACE=1 git

    # Switches to and pulls given branch.
    # Usage: git pullitch [branch name (default: main)]
    #        e.g. git pullitch
    #        e.g. git pullitch feature/foo
    pullitch = "!f() { local targetBranch=${1:-main} && git switch $targetBranch && git pull; }; f"

    # TODO: Use git back
    # Switches to and pulls given branch, switches back to the current branch and merges from given branch.
    # Usage: git quickmerge [branch name (default: main)]
    #        e.g. git quickmerge
    #        e.g. git quickmerge feature/foo
    quickmerge = "!f() { local targetBranch=${1:-main} && local currentBranch=$(git rev-parse --abbrev-ref HEAD) && git pullitch $targetBranch && git switch $currentBranch && git merge --no-ff $targetBranch; }; f"

    # TODO: Use git back
    # Switches to and pulls given branch, switches back to the current branch and rebases on top of given branch.
    # Usage: git quickrebase [branch name (default: main)]
    #        e.g. git quickrebase
    #        e.g. git quickrebase feature/foo
    quickrebase = "!f() { local targetBranch=${1:-main} && local currentBranch=$(git rev-parse --abbrev-ref HEAD) && git pullitch $targetBranch && git switch $currentBranch && git rebase $targetBranch; }; f"

    # TODO: Add delete-merged alias

    # Deletes branches squashed into given branch.
    # Based on https://github.com/not-an-aardvark/git-delete-squashed
    # Usage: git delete-squashed [branch name (default: main)]
    #        e.g. git delete-squashed
    #        e.g. git delete-squashed feature/foo
    delete-squashed = "!f() { local targetBranch=${1:-main} && git checkout -q $targetBranch && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $targetBranch $branch) && [[ $(git cherry $targetBranch $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done; }; f"

    # Rename a file or a folder.
    # Supports rename operations with only case changes.
    # Usage: git rename <original file/folder name> <new file/folder name>
    #        e.g. git rename foo bar
    rename = "!f() { local fromPath=$1 && local toPath=$2 && git mv \"$fromPath\" \"${fromPath}_TMP\" && git mv \"${fromPath}_TMP\" \"$toPath\"; }; f"

    # Append staged changes to last commit without editing commit message.
    # Usage: git append
    append = "!f() { git commit --amend --no-edit; }; f"

    # Shortens the given commit hash.
    # Usage: git shorten <commit hash>
    #        e.g. git shorten 1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b
    shorten = "!f() { local commitHash=$1 && git rev-parse --short $commitHash; }; f"

    # Change last commit's message.
    # Usage: git reword <new message>
    #        e.g. git reword foo
    reword = "!f() { local newMessage=$1 && git commit --amend -m \"$newMessage\"; }; f"

    # Switches and pulls latest from given branch, prunes remote branches, fetches tags and deletes branches squashed into given branch.
    # Usage: git cleansquashed [branch name (default: main)]
    #        e.g. git cleansquashed
    #        e.g. git cleansquashed feature/foo
    cleansquashed = "!f() { local targetBranch=${1:-main} && git switch $targetBranch && git pull -p --tags && git delete-squashed $targetBranch; }; f"

    # Alias for cleansquashed.
    # Usage: git tidy [branch name (default: main)]
    #        e.g. git tidy
    #        e.g. git tidy feature/foo
    tidy = "!f() { local targetBranch=${1:-main} && git cleansquashed $targetBranch; }; f"

    # Remove all dangling commits (including those still reachable from stashes and other reflogs).
    # Based on https://stackoverflow.com/a/4528593
    # Usage: git spick-and-span
    spick-and-span = "!f() { git reflog expire --expire-unreachable=now --all && git gc --prune=now; }; f"

    # Pushes current branch history up to the specified reference.
    # Usage: git pushupto <ref>
    #        e.g. git pushupto feature/foo
    #        e.g. git pushupto v1.0.0
    #        e.g. git pushupto 1a2b3c4
    pushupto = "!f() { local targetRef=${1:-main} && currentBranch=$(git rev-parse --abbrev-ref HEAD) && git push origin $targetRef:refs/heads/$currentBranch; }; f"

    # Switch back to previous branch.
    # Usage: git back
    back = !git switch - && :
