[http]
    sslBackend = schannel
    sslVerify = true
    sslCAInfo = ~/scoop/apps/git/current/mingw64/ssl/certs/ca-bundle.crt
[credential]
    helper = manager
    useHttpPath = true
[fetch]
    prune = true
[pull]
    rebase = true
[core]
    longpaths = true
[alias]
    # Debug git commands.
    # Usage: git debug [other git command]
    #        e.g. git debug status
    debug = !GIT_TRACE=1 git

    # Switches to and pulls given branch, switches back to the current branch and merges from given branch.
    # Usage: git quickmerge [other branch name]
    #        e.g. git quickmerge master
    quickmerge = !CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD) && git switch $1 && git pull && git switch $CURRENT_BRANCH && git merge --no-ff $1 && :

    # Switches to and pulls given branch, switches back to the current branch and rebases on top of given branch.
    # Usage: git quickrebase [other branch name]
    #        e.g. git quickrebase master
    quickrebase = !CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD) && git switch $1 && git pull && git switch $CURRENT_BRANCH && git rebase $1 && :

    # Switches to and pulls given branch.
    # Usage: git pullitch [other branch name]
    #        e.g. git pullitch master
    pullitch = !git switch $1 && git pull && :

    # Deletes branches squashed into given branch.
    # Usage: git delete-squashed [branch name]
    # Based on https://github.com/not-an-aardvark/git-delete-squashed
    delete-squashed = "!git checkout -q $1 && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $1 $branch) && [[ $(git cherry $1 $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done" && :

    # Rename a file or a folder. Supports rename operations with only case changes.
    # Usage: git rename [original file/folder name] [new file/folder name]
    #        e.g. git rename src/utils/Log src/utils/log
    rename = !git mv \"$1\" \"$1_TMP\" && git mv \"$1_TMP\" \"$2\" && :

    # Append staged changes to last commit without editing commit message
    # Usage: git append
    append = !git commit --amend --no-edit && :

    # Shortens the given commit hash
    # Usage: git shorten [commit hash]
    shorten = !git rev-parse --short $1 && :

    # Change last commit's message
    # Usage: git reword "[new message]"
    reword = !git commit --amend -m \"$1\" && :

    # Switches and pulls latest from given branch, prunes remote branches, fetches tags and deletes branches squashed into given branch
    # Usage: git cleanmerged [branch name]
    #        e.g. git cleanmerged master
    cleanmerged = !git switch $1 && git pull -p --tags && git delete-squashed $1 && :

    # Alias for cleanmerged
    # Usage: git tidy [branch name]
    tidy = !git cleanmerged $1

    # Pushes current branch history up to the specified commit hash
    # Usage: git pushupto [commit hash]
    pushupto = !CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD) && git push origin $1:refs/heads/$CURRENT_BRANCH && :

    # Switch back to previous branch
    # Usage: git back
    back = !git switch - && :
