// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://mcr.microsoft.com/en-us/product/devcontainers/dotnet/about
{
  "name": "dotnet7",
  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  "image": "mcr.microsoft.com/devcontainers/dotnet:dev-7.0-bullseye",
  // Features to add to the dev container. More info: https://containers.dev/features.
  "features": {
    // add powershell
    "ghcr.io/devcontainers/features/powershell:1": {}
  },
  // Configure tool-specific properties.
  "customizations": {
    // Configure properties specific to VS Code.
    "vscode": {
      "settings": {
        "powershell.powerShellAdditionalExePaths": {},
        "powershell.powerShellDefaultVersion": "Pwsh",
        "terminal.integrated.defaultProfile.linux": "pwsh",
        "terminal.integrated.fontFamily": "CaskaydiaCove NF",
        "terminal.integrated.profiles.linux": {
          "Pwsh": {
            "path": "pwsh",
            "args": [
              "-NoLogo"
            ]
          }
        },
        "terminal.integrated.tabs.enabled": true,

        "workbench.iconTheme": "vscode-icons",

        "diffEditor.ignoreTrimWhitespace": false,

        "editor.inlineSuggest.enabled": true,
        "editor.guides.bracketPairs": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 4,

        "[json]": {
          "editor.tabSize": 2,
          "editor.defaultFormatter": "vscode.json-language-features"
        },

        "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",

        "pasteImage.path": "${currentFileDir}/images",

        "spellright.language": [
          "fr",
          "en"
        ],

        "coddx.taskBoard.fileList": "KANBAN.md",

        "dotnet-test-explorer.testProjectPath": "**/*Tests.csproj",
        "dotnet-test-explorer.testArguments": "/p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=../../lcov.info",
        "dotnet-test-explorer.pathForResultFile": "./src/TestResults",
        "dotnet-test-explorer.runInParallel": true,
        "dotnet-test-explorer.autoWatch": true,
        "dotnet-test-explorer.autoExpandTree": true,
        "dotnet-test-explorer.treeMode": "full",
        "dotnet-test-explorer.enableTelemetry": false,

        "testExplorer.addToEditorContextMenu": true,

        "coverage-gutters.showGutterCoverage": false,
        "coverage-gutters.showLineCoverage": true,
        "coverage-gutters.showRulerCoverage": true,
        "coverage-gutters.coverageFileNames": [
          "lcov.info",
          "cov.xml",
          "coverage.xml",
          "coverage*.xml",
          "jacoco.xml",
          "coverage.cobertura.xml"
        ],
        "coverage-gutters.coverageReportFileName": "coverage/index.html",

        "todo-tree.filtering.ignoreGitSubmodules": true,
        "todo-tree.general.statusBar": "tags",
        "todo-tree.general.statusBarClickBehaviour": "reveal",
        "todo-tree.general.showActivityBarBadge": true,
        "todo-tree.general.showIconsInsteadOfTagsInStatusBar": true,
        "todo-tree.general.tags": [
          "BUG",
          "HACK",
          "FIXME",
          "TODO",
          "XXX",
          "[ ]",
          "[x]",
          "HOTFIX",
          "FIX",
          "FIXIT",
          "BAD",
          "TRASH"
        ],
        "todo-tree.general.tagGroups": {
          "FIXME": [
            "FIXME",
            "FIXIT",
            "FIX"
          ],
          "XXX": [
            "XXX",
            "BAD",
            "TRASH"
          ]
        },
        "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^[ \\t]*(-|\\d+.))\\s*($TAGS)",
        "todo-tree.regex.regexCaseSensitive": false,
        "todo-tree.tree.hideIconsWhenGroupedByTag": false,
        "todo-tree.tree.hideTreeWhenEmpty": false,
        "todo-tree.tree.groupedByTag": false,
        "todo-tree.tree.expanded": true,
        "todo-tree.tree.flat": false,
        "todo-tree.tree.showCountsInTree": true,
        "todo-tree.tree.tagsOnly": false,
        "todo-tree.highlights.useColourScheme": true,
        "todo-tree.highlights.backgroundColourScheme": [
          "white"
        ],
        "todo-tree.highlights.foregroundColourScheme": [
          "black"
        ],
        "todo-tree.highlights.defaultHighlight": {
          "icon": "alert",
          "type": "line",
          "foreground": "red",
          "background": "white",
          "opacity": 50,
          "iconColour": "blue",
          "gutterIcon": false
        },
        "todo-tree.highlights.customHighlight": {
          "BUG": {
            "icon": "bug",
            "iconColour": "firebrick",
            "background": "firebrick"
          },
          "HACK": {
            "icon": "rocket",
            "iconColour": "deeppink",
            "background": "deeppink"
          },
          "FIXME": {
            "icon": "tools",
            "iconColour": "green",
            "background": "green"
          },
          "HOTFIX": {
            "icon": "flame",
            "iconColour": "orange",
            "background": "orange"
          },
          "TODO": {
            "icon": "checklist",
            "iconColour": "deepskyblue",
            "background": "deepskyblue"
          },
          "XXX": {
            "icon": "trash",
            "iconColour": "olive",
            "background": "olive"
          },
          "[ ]": {
            "icon": "check",
            "iconColour": "lightpink",
            "background": "lightpink",
            "foreground": "red",
            "type": "tag"
          },
          "[x]": {
            "icon": "check-circle",
            "iconColour": "palegreen",
            "background": "palegreen",
            "foreground": "green",
            "type": "tag",
            "hideFromStatusBar": true,
            "hideFromTree": true,
            "gutterIcon": true
          }
        },

        // Peacock configuration -- Start
        "peacock.color": "#F7F959",
        "peacock.remoteColor": "#F7F959",
        "peacock.showColorInStatusBar": false,
        // Peacock configuration -- Surroundings
        "peacock.affectTitleBar": true,
        "peacock.affectStatusBar": true,
        "peacock.affectDebuggingStatusBar": false,
        "peacock.affectActivityBar": false,
        // Peacock configuration -- Borders
        "peacock.affectTabActiveBorder": true,
        "peacock.affectSideBarBorder": true,
        "peacock.affectPanelBorder": true,
        "peacock.affectStatusAndTitleBorders": false
        // Peacock configuration -- End
      },
      "extensions": [
        "ban.spellright",
        "yzhang.markdown-all-in-one",
        "fcrespo82.markdown-table-formatter",
        "mushan.vscode-paste-image",
        "bierner.markdown-mermaid",
        "davidanson.vscode-markdownlint",
        "christian-kohler.path-intellisense",
        "mhutchie.git-graph",
        "github.vscode-pull-request-github",
        "gruntfuggly.todo-tree",
        "johnpapa.vscode-peacock",
        "lostintangent.vsls-whiteboard",
        "ms-vsliveshare.vsliveshare",
        "vscode-icons-team.vscode-icons",
        "pflannery.vscode-versionlens",
        "esbenp.prettier-vscode",
        "visualstudioexptteam.vscodeintellicode",
        "ms-dotnettools.csharp",
        "shardulm94.trailing-spaces",
        "eservice-online.vs-sharper",
        "fudge.auto-using",
        "usernamehw.errorlens",
        "ryanluker.vscode-coverage-gutters",
        "hbenl.vscode-test-explorer",
        "formulahendry.dotnet-test-explorer",
        "coddx.coddx-alpha",
        "ms-dotnettools.dotnet-interactive-vscode",
        "ms-vscode.powershell"
      ]
    }
  },
  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  // "forwardPorts": [3000],
  // Use 'portsAttributes' to set default properties for specific forwarded ports. 
  // More info: https://containers.dev/implementors/json_reference/#port-attributes
  // "portsAttributes": {
  //   "9000": {
  //     "label": "Hello Remote World",
  //     "onAutoForward": "notify"
  //   }
  // },

  // Use 'postCreateCommand' to run commands after the container is created.
  "postCreateCommand": "chmod +x ${containerWorkspaceFolder}/.devcontainer/terminal-config.sh; ${containerWorkspaceFolder}/.devcontainer/terminal-config.sh;"
}